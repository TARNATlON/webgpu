name: CI

on: [push]

jobs:
  build:
    strategy:
      matrix:
        os:
          - windows-2019
          - ubuntu-latest
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout webgpu
        uses: actions/checkout@v2
      - name: Checkout dawn
        uses: actions/checkout@v2
        with:
          repository: Kings-Distributed-Systems/dawn
          ref: dcp/release
          path: dawn
      - uses: actions/setup-node@v2
        with:
          node-version: '13.x'

      # linux/macos
      - name: Linux/MacOS - Add node-api
        if: matrix.os != 'windows-2019'
        shell: bash
        run: |
          git clone https://github.com/Kings-Distributed-Systems/node node
          cd node
          git checkout dcp/release
      - name: Linux/MacOS - Add node-addon-api
        if: matrix.os != 'windows-2019'
        shell: bash
        run: |
          git clone https://github.com/Kings-Distributed-Systems/node-addon-api node_addon_api
          cd node_addon_api
          git checkout dcp/release
      - name: Linux/MacOS - Add tools for dawn
        if: matrix.os != 'windows-2019'
        shell: bash
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH=`pwd`/depot_tools:$PATH
          cd dawn
          cp scripts/standalone.gclient .gclient
          gclient sync
      - name: Linux - Install tools and libs from apt
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y \
            clang \
            libosmesa6-dev \
            libvulkan-dev \
            libxcursor-dev \
            libxi-dev \
            libxinerama-dev \
            libxrandr-dev \
            libxxf86vm-dev \
      - name: Linux/MacOS - Build dawn
        if: matrix.os != 'windows-2019'
        shell: bash
        run: |
          # Switch to python2 system environment.
          # From: https://github.com/Jguer/yay/issues/1257
          mkdir -p bin
          ln -sf /usr/bin/python2 ./bin/python
          ln -sf /usr/bin/python2-config ./bin/python-config
          export PATH=`pwd`/bin:`pwd`/depot_tools:$PATH
          cd dawn
          gn gen out/Shared --target_cpu="x64" --args="is_component_build=true is_debug=false is_clang=true"
          ninja -C out/Shared
      - name: Linux/MacOS - Build webgpu
        if: matrix.os != 'windows-2019'
        shell: bash
        run: |
          printf `pwd`/dawn > PATH_TO_DAWN
          printf `pwd`/node > PATH_TO_NODE_API
          printf `pwd`/node_addon_api > PATH_TO_NODE_ADDON_API
          npm install
          npm run all --dawnversion=0.0.1
          ls -l generated/0.0.1/*/build/Release
      # windows
      - name: Windows - Add node-api
        if: matrix.os == 'windows-2019'
        run: |
          git clone https://github.com/Kings-Distributed-Systems/node node
          cd node
          git checkout dcp/release
      - name: Windows - Add node-addon-api
        if: matrix.os == 'windows-2019'
        run: |
          git clone https://github.com/Kings-Distributed-Systems/node-addon-api node_addon_api
          cd node_addon_api
          git checkout dcp/release
      - name: Windows - Add tools for dawn
        if: matrix.os == 'windows-2019'
        run: |
          Write-Host "get depot_tools"
          (New-Object System.Net.WebClient).DownloadFile("https://storage.googleapis.com/chrome-infra/depot_tools.zip", "$pwd\depot_tools.zip")
          Write-Host "unzip depot_tools"
          & 7z x -odepot_tools -bd .\depot_tools.zip
          $env:Path="${pwd}\depot_tools;$env:Path"
          $env:DEPOT_TOOLS_WIN_TOOLCHAIN=0
          $env:GYP_MSVS_VERSION=2019
          cd dawn
          cp .\scripts\standalone.gclient .gclient
          Write-Host "gclient sync"
          & gclient sync
          & python -m pip install pywin32
      - name: Windows - Build dawn
        if: matrix.os == 'windows-2019'
        run: |
          $env:Path="${pwd}\depot_tools;$env:Path"
          $env:DEPOT_TOOLS_WIN_TOOLCHAIN=0
          $env:GYP_MSVS_VERSION=2019
          cd dawn
          gn gen out/Shared --ide=vs --target_cpu="x64" --args="dawn_enable_vulkan_validation_layers=false is_component_build=true is_debug=false is_clang=false"
          ninja -C out/Shared
      - name: Windows - Build webgpu
        if: matrix.os == 'windows-2019'
        run: |
          $env:GYP_MSVS_VERSION=2019
          [System.IO.File]::WriteAllText("$pwd/PATH_TO_DAWN", ((Resolve-Path .\dawn).Path -Replace "/$" -Replace "\\", "/"))
          cat PATH_TO_DAWN
          [System.IO.File]::WriteAllText("$pwd/PATH_TO_NODE_API", ((Resolve-Path .\node).Path -Replace "/$" -Replace "\\", "/"))
          cat PATH_TO_NODE_API
          [System.IO.File]::WriteAllText("$pwd/PATH_TO_NODE_ADDON_API", ((Resolve-Path .\node_addon_api).Path -Replace "/$" -Replace "\\", "/"))
          cat PATH_TO_NODE_ADDON_API
          npm install
          npm run all --dawnversion=0.0.1
          ls generated/0.0.1/*/build/Release
      # upload
      - name: Upload build
        uses: actions/upload-artifact@v1
        with:
          name: generated-${{ matrix.os }}
          path: generated

  publish:
    if: ${{ false }} # Disable
    needs: build
    name: publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout webgpu
        uses: actions/checkout@v2
      - name: Download linux build
        uses: actions/download-artifact@v1
        with:
          name: generated-ubuntu-latest
          path: generated
      - name: Download windows build
        uses: actions/download-artifact@v1
        with:
          name: generated-windows-2019
          path: generated
      - name: Publish to NPM
        uses: primer/publish@v2.0.0
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
